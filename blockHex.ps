%!PS

%PICT file
%/BlockFileName (/Users/arethusa/Downloads/Omega/Omega-1) def

%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/pcdRW/k4050DiagnosticsTrace/oldapp) def

%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/pcdRW/PowerPlant/PowerPlant Resources/PowerPlant ResEdit TMPLs) def
%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/4050/System Folder 8.6/Preferences/KODAK 4050 Preferences/config/Bus 1, ID 6/_dev_bus1id6) def

%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/4050/System Folder 8.6/Preferences/KODAK 4050 Preferences/config/SBA.pcode) def

%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/4050/System Folder 8.6/Preferences/KODAK 4050 Preferences/config/pcode.config) def

%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/4050/PCD4050 Install Disc/Installation/PCD4050 Utilities/CAL Instructions) def
%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/4050/PCD4050 Utilities/CAL Instructions.bmp) def

%/BlockFileName (/Volumes/cheapblue32/compactproStuff/Compact Pro User's Guide) def
% diskimage file

%/BlockFileName (/Volumes/ESYSTORE/MFSImages/ppspt.image) def
%/BlockFileName (/Volumes/ESYSTORE/MFSImages/MDS2.image) def

%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/BlackBinder/Page01/Lime/Lime™/Lime™ 0.4 Demo) def


% data is the same as .img -- 

%/BlockFileName (/Users/arethusa/Documents/ps_fragments/MFSLives/Sample.img) def


%orig
%/Users/arethusa/Documents/PCDDocs&Tools/kodak_lut_cineon_2_Film_Scan/5242/0017.cin
% extrat
%/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5242/0017.cin
% cmp '/Users/arethusa/Documents/PCDDocs&Tools/kodak_lut_cineon_2_Film_Scan/5242/0017.cin' '/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5242/0017.cin'
% cmp '/Users/arethusa/Documents/PCDDocs&Tools/kodak_lut_cineon_2_Film_Scan/5242/0018.cin' '/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5242/0018.cin'
% cmp '/Users/arethusa/Documents/PCDDocs&Tools/kodak_lut_cineon_2_Film_Scan/5242/0019.cin' '/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5242/0019.cin'

% cmp '/Users/arethusa/Documents/PCDDocs&Tools/kodak_lut_cineon_2_Film_Scan/5274/0020.cin' '/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5274/0020.cin'
% cmp '/Users/arethusa/Documents/PCDDocs&Tools/kodak_lut_cineon_2_Film_Scan/5274/0021.cin' '/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5274/0021.cin'

% blown file  (smi?  Sea? ) -- to far gone to recover?
%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/Maurice/4050_1) def



% split the 4050 file into chunks

/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/segment_F000000_0x00000000) def	% 23MB
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/segment_F000001_0x015B0000) def	% 965KB graphic fragment
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/segment_F000002_0x0169BA00) def	% 17KB prob graphic
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5274/0019.cin) def % 10MB
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5242/0017.cin) def % 13MB
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/segment_F000004_0x02C9FA00) def	% 512b
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5274/0020.cin) def % 13MB
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/segment_F000005_0x038CFA00) def	% 512b
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5242/0018.cin) def % 13MB
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/segment_F000006_0x044FFA00) def	% 512b
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5274/0021.cin) def % 13MB
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/segment_F000007_0x0512FA00) def	% 512b
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5242/0019.cin) def % 13MB
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/segment_F000008_0x05D5FA00) def	% 512b
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/kodaklutcineon2/5274/0022.cin) def % 13MB
%/BlockFileName (/Volumes/Arethusa/Documents/PCDDocs&Tools/split4050/segment_F000009_0x0698FA00) def	% 3.7NB graphic fragment



%cineon files first plaintext found in above
%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/kodak_lut_cineon_2_Film_Scan/5242/0019.cin) def

%/BlockFileName (/Users/Arethusa/Documents/PCDDocs&Tools/Maurice/4050.ZIP) def
%/BlockFileName (/Volumes/4050/PCD4050 Install Disc/Installation/PCD4050 Utilities/scnMCal.PPC) def


%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/4050/Calibration.smi) def
% following is compressed -- boot/directory blocks are plaintext
%/BlockFileName (/Volumes/cheapblue32/Mac OS 8.1 Update.smi) def


% has a normal SIT! header
%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/exe_extrations/pcd4050.sea) def
%/BlockFileName (/Volumes/cheapblue32/MrSIDStandAlonePPC.sea) def
%/BlockFileName (/Volumes/cheapblue32/Sys_7.5.5_Update-1of3.sea.bin) def

% starts with archive.sea
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/BlackBinder/Page09/Blank <2>/Archive.sea.2) def

% cpt archives
%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/Kodak Build-It/MAC/ARRANGIT/ARRANGIT.SEA;1) def
%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/exe_extrations/Kodak ICC Photo CD.sea) def

% unkown archive
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/A2E/archive/Apple II System Disk 3.2.sea) def

%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/BlackBinder/Page09/Blank <2>/Archive.sea.2) def

%/BlockFileName (/Volumes/cheapblue32/niftytelnet-1.1-ssh-r3.cpt) def


%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/Brown Box/Box.left/Packit:Stuffit/Packit III (V1.3)/Fly.pit) def

%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/Brown Box/Box.left/MDA TIFF JPEG.image) def

% not postscript  ( may be a 1 bit image)
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/BlackBinder/Page02/xxx/plate VI.ps) def


%prodos disk
%/BlockFileName (/Volumes/ESYSTORE/white disks/GIM.img) def

%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/Brown Box/Box.left/Movies.image) def


% big disk images
%/BlockFileName (/Volumes/adelwise040331/Adelwise.img) def
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/Adelwise.img) def
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/Disk Tools PPC.img) def
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/system 7.img) def
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/hazard.img) def
%/BlockFileName (/Volumes/cheapblue32/hazard.img) def

% seems to be a DOS disk -- also seems to be compressed
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/TESTD.img) def

%/BlockFileName (/Volumes/TISSOT/Quarkmedia/Viewer for Windows.image) def


%/BlockFileName (/Volumes/cheapblue32/AutoQuartz_documents/QuarkImmedia Viewer 1.5/QuarkImmedia™ Viewer 1.5) def
%/BlockFileName (/Users/arethusa/Documents/Watchmaking/Docs/AutoQuartz_documents/QuarkImmedia Viewer 1.5.sit) def

%/BlockFileName (/Volumes/TISSOT/Vademec.imd) def
%/BlockFileName (/Volumes/cheapblue32/AutoQuartz_documents/Vademec.imd) def
%/BlockFileName (/Volumes/cheapblue32/AutoQuartz_documents/QuarkImmedia Viewer 1.5/QuarkImmedia™ Viewer Help 1.5) def


%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/Amy' Xmas) def

%/BlockFileName (/Users/arethusa/Documents/pipeO/tempo/T54) def
%/BlockFileName (/Volumes/NO NAME/tempo/T54) def
%/BlockFileName (/Users/arethusa/Documents/emutek/savedScans/57982A.SCN) def

%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/UMAX1220WikiBackup/UmaxAstra1600u) def

%/BlockFileName (/Users/arethusa/Music/T100) def

% should be diskcopy 6.3.3 images 

%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/BMUG Graphic-1.img) def
%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/untitled09.img.dmg) def


%/BlockFileName (/Volumes/ESYSTORE/blue disks/single.side/02.single side.img) def

%/BlockFileName (/Users/arethusa/Downloads/tifalize.img) def
%/BlockFileName (/Users/arethusa/Documents/tifalize.img) def
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/tifalize.dmg) def

%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/Calibration.img) def

%/BlockFileName (/Users/arethusa/Documents/PCDDocs&Tools/QuickDraw GX 116.img) def


%/BlockFileName (/Volumes/20040128Mars/maddelina _/testR) def
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/adelmouse.im) def
%/BlockFileName (/Volumes/disk_images/!MDA/Fonts/MDA Family) def

%/BlockFileName (/Users/arethusa/Documents/ps_fragments/MFSImages/node-apple-data-compression-master/test/data/adc-compressed.bin) def
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/MFSImages/node-apple-data-compression-master/test/data/adc-decompressed.bin) def



%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/TTConverter1.5.sit) def
%/BlockFileName (/Users/arethusa/Documents/ps_fragments/OtherImages/blue.sit) def


/verbose false def

/writeLog false def

/DBGPatData false def
/DBGLoader false def

/DBGMemPtr false def
/ListByClass true def

/DBGTraceBack false def

/DBGInstDec false def
/DBGInstEdge false def

/thisdict (root block) def

% end of user options 
%================================================================================
/dfa {{ exch =string cvs print (: ) print ==} forall} bind def

/=$ {dup length 2 mul dup 60 idiv add 1 add string dup 
/ASCIIHexEncode filter 3 -1 roll 3 copy writestring 2 
index flushfile pop pop  closefile =} bind def

/$ {dup length 2 mul dup 60 idiv add 1 add string dup 
/ASCIIHexEncode filter 3 -1 roll 3 copy writestring 2 
index flushfile pop pop  closefile } bind def


/lzw {dup length 2 mul dup 60 idiv add 1 add string dup 
/LZWEncode filter 3 -1 roll 3 copy writestring 2 
index flushfile pop pop  closefile } bind def


/flate {dup length 2 mul dup 60 idiv add 1 add string dup 
/FlateEncode filter 3 -1 roll 3 copy writestring 2 
index flushfile pop pop  closefile } bind def



/Word$ <860000> def			% high first
/Long$ <8400000000> def		% high first

/Word_l$ <870000> def			% low first
/Long_l$ <8500000000> def		% low first

/pHex { 2 string dup 0 (00) putinterval dup 3 -1 roll 16#FF and 16 =string cvrs 2 1 index length sub exch putinterval } bind def

/pWord { 4 string dup 0 (0000) putinterval dup 3 -1 roll 16#FFFF and 16 =string cvrs 4 1 index length sub exch putinterval } bind def

/pAddr { 6 string dup 0 (000000) putinterval dup 3 -1 roll 16#FFFFFF and 16 =string cvrs 6 1 index length sub exch putinterval } bind def

/pLong { 8 string dup 0 (00000000) putinterval dup 3 -1 roll 16#FFFFFFFF and 16 =string cvrs 8 1 index length sub exch putinterval } bind def

/pOct { 3 string dup 0 (000) putinterval dup 3 -1 roll 16#FF and 8 =string cvrs 3 1 index length sub exch putinterval } bind def

/pBin { 8 string dup 0 (00000000) putinterval dup 3 -1 roll 2 =string cvrs 8 1 index length sub exch putinterval } bind def

/pDec { dup 0 gt { (       ) 7 string copy dup 3 -1 roll 16#FFFFFF and =string cvs 7 1 index length sub exch putinterval
		}{
			 (     ) 5 string copy dup 3 -1 roll  =string cvs 5 1 index length sub exch putinterval
		
		}ifelse

 } bind def

/pDec3 { (   ) 3 string copy dup 3 -1 roll 16#03FF and =string cvs 3 1 index length sub exch putinterval } bind def

/pDec5 { (     ) 5 string copy dup 3 -1 roll 16#FFFFFF and =string cvs 5 1 index length sub exch putinterval } bind def


/pLbl { (L000000) 7 string copy dup 3 -1 roll 16#FFFFFF and =string cvs 7 1 index length sub exch putinterval } bind def
/pLblF { (F000000) 7 string copy dup 3 -1 roll 16#FFFFFF and =string cvs 7 1 index length sub exch putinterval } bind def
/pLblD { (D000000) 7 string copy dup 3 -1 roll 16#FFFFFF and =string cvs 7 1 index length sub exch putinterval } bind def
/pLblA { (ANON000) 7 string copy dup 3 -1 roll 16#FFFFFF and =string cvs 7 1 index length sub exch putinterval } bind def


/ljust {cvi 16#FF and dup 128 ge {16#FF xor not} if 
		4 string dup 0 (    ) putinterval dup 3 -1 roll cvi =string cvs 0 exch putinterval } bind def

/checksum 0 def


/makestring { 
	dup length string       % new string of right size
	dup /NullEncode filter      % make a file out of string
	2 index                 % array to stack top
    { 2 copy write pop }         % integers to string
	forall
    flushfile exch pop                   % clean up
} bind def

/strcat {
	dup length 2 index length add string
	2 index length 3 -1 roll 3 copy putinterval pop pop 
	0 3 -1 roll 3 copy putinterval pop pop 

} bind def

/toupper {
	[ exch
	{dup 95 gt {16#5F and} if} forall
	] makestring
} bind def

/flip_bits {
%  n = n & 0b11110000 >> 4 | n & 0b00001111 << 4;  // efghabcd
	dup 2#11110000 and -4 bitshift exch 2#00001111 and 4 bitshift or 
%  n = n & 0b11001100 >> 2 | n & 0b00110011 << 2;  // ghefcdab 
	dup 2#11001100 and -2 bitshift exch 2#00110011 and 2 bitshift or 
%  n = n & 0b10101010 >> 1 | n & 0b01010101 << 1;  // hgfedcba
	dup 2#10101010 and -1 bitshift exch 2#01010101 and 1 bitshift or
} bind def


% calendar utilities
/unix2c {
	/utime exch def 
	/idate 6 array def

%*utime  input  Unix system time, seconds since 1970.0
%*idate  output Array: 1=year, 2=month, 3=date, 4=hour, 5=minute, 6=secs
%based on code by  Clive Page, Leicester University, UK.   1995-MAY-2
%      integer mjday, nsecs
%      real day
%*Note the MJD algorithm only works from years 1901 to 2099.
	10 dict begin 
      /mjday    utime 86400 div cvi 40587 add def
       
      idate 0   1858 mjday 321.51 add 365.25 div cvi add put
      /day      mjday 100 mul 26225 add cvi 36525 mod 100 div cvi 0.5 add def

%      idate(2) = 1 + int(mod(day / 30.6 + 2.0, 12.0) ) 
      idate 1	1 day 30.6 div 2.0 add 10 mul cvi 120 mod 10 div cvi add put
      idate 2 	1 day 10 mul cvi 306 mod 10 div cvi add put
      /nsecs    utime 86400 mod def
      idate 5	nsecs 60 mod put
      /nsecs    nsecs 60 div cvi def
      idate 4	nsecs 60 mod put
      idate 3	nsecs 60 div cvi put
    end
} bind def

/isNumber << % >>
	48 0
	49	1
	50	2
	51	3
	52	4
	53	5
	54	6
	55	7
	56 8
	57 9
>> def


%/*****************************************************************************\
%|                                                                             |
%|                                  File IO                                    |
%|                                                                             |
%\*****************************************************************************/
/backShow /print load def

/writedict << % >
/lp 0  %= linbfr;
/linbfr [ 511 {32} repeat ] makestring 
/blnkbfr [ 511 {32} repeat ] makestring 
>> def

/writef {
	writeLog {
		lf exch writestring
	}{
		writedict begin
		/wrkstr exch def
		linbfr lp wrkstr putinterval
		/lp lp wrkstr length add def
		% flush the buffer when overflow is imminent
		lp 510 gt {wrtlin} if

		end
	}ifelse
} bind def

/writem {
		writedict begin
		/wrkstr exch def
		linbfr lp wrkstr putinterval
		/lp lp wrkstr length add def
		% flush the buffer when overflow is imminent
		lp 200 gt {wrtlin} if

	end
} bind def

/wrtlin {
	writedict begin
	linbfr lp 16#0D put /lp lp 1 add def
	linbfr lp 16#0A put /lp lp 1 add def
	linbfr 0 lp getinterval
	print
	/lp 0 def
	linbfr 0 blnkbfr putinterval
	end
} bind def

/wrtlin33 {
	writeLog {
		lf <0D0A> writestring lf flushfile
	}{
		writedict begin
		linbfr lp 16#0D put /lp lp 1 add def
		linbfr lp 16#0A put /lp lp 1 add def
		linbfr 0 lp getinterval
		print flush
		/lp 0 def
		linbfr 0 blnkbfr putinterval
		end
	}ifelse
} bind def

/wrtNum {
	writeLog {
		lf exch write 
	}{
		(16#) print pHex =
	}ifelse
} bind def 

/wrtpos 
{
	writedict begin

	/lp exch def
	end
} bind def

/writeRawBinary {
	writefile {
		of exch writestring
	}{
		(<) print =$	
	%	writedict begin
	%	/wrkstr exch def
	%	linbfr lp wrkstr putinterval
	%	/lp lp wrkstr length add def
	%	% flush the buffer when overflow is imminent
	%	lp 96 gt {wrtlin} if
	%	end
	}ifelse
} bind def


/dumpHex {
	/xAddrx exch def
	/dumpData$ exch def			
	% make a pretty block
	/rbPtr dumpData$ def
	dumpData$ length 16 div cvi {
		xAddrx 512 mod 0 eq {
			(Block: ) print xAddrx 512 div cvi ==
		}if
		xAddrx pLong print (:) print
		/xAddrx xAddrx 16 add def
		rbPtr 0 16 getinterval dup
		(<) print $ print ( % ) print
		[ exch
		{
			dup 32 lt {
				pop 46
			}{
				dup 16#80 ge {
					pop 46
				}if
			} ifelse	
				
		}forall] makestring =
		/rbPtr rbPtr 16 1 index length 16 sub getinterval def
		
	} repeat
	
	rbPtr length 0 gt {
		rbPtr dup
		xAddrx pLong print (:) print
		(<) print $ print
		dup length 16 exch sub 2 mul { ( ) print} repeat
		( % ) print
		[ exch
		{
			dup 32 lt {
				pop 46
			}if
		}forall] makestring =
	} if
} def


	/TFRN BlockFileName (/..namedfork/rsrc) strcat def
	

BlockFileName print
	BlockFileName status {
( data fork: ) =
	4 array astore /fStatsData exch def  % file is readable 
	fStatsData ==
	(modified timestamp: ) print fStatsData 2 get unix2c idate ==
	(created timestamp: ) print fStatsData 2 get unix2c idate ==
pstack	
	}{
( no data fork) =
	}ifelse

TFRN print
	TFRN status {
( resource fork: ) =
	4 array astore /fStatsRSRC exch def  % file is readable 
	fStatsRSRC ==

	/hasRSRC true def

(->) =
pstack	
	}{
( no file resource.) =
		/hasRSRC false def
	}ifelse



	/tf BlockFileName (r) file def
%	/tf BlockFileName (r) file /RunLengthDecode filter def
%	/tf BlockFileName (r) file /LZWDecode filter def

% 22 MB before image

% some pattern data at 015B0000  -- looks like 982016 or just under 1mb



	/blockBuffer 512 string def
	
	/maxBlocks fStatsData 0 get def

	/interestingAddr 0 def

	interestingAddr 0 ne {
		tf interestingAddr 512 div cvi 512 mul setfileposition  % align to block boundry
	
		/xAddr tf fileposition def

	}{

		/xAddr 0 def

	} ifelse

	maxBlocks 0 gt {
	
		maxBlocks {
	
			tf blockBuffer readstring {
				/rawData$ exch def
	
				rawData$ xAddr dumpHex
	
			}{
		(% last block) =
				/rawData$ exch def
	
				rawData$ xAddr dumpHex
			
				% close the file and re open it for later
			
				tf closefile
			
				/tf BlockFileName (r) file def
				
				exit
	
			}ifelse
			
			/xAddr xAddr 512 add def
		
		} repeat
		
	}{
		% small file

		tf fStatsData 1 get string readstring {
			/rawData$ exch def
	
			rawData$ xAddr dumpHex
	
		}{
	(% can not read data from file) =
	
		}ifelse


		tf closefile	

%(% skipping data fork) =


		fStatsRSRC 1 get 0 gt 	hasRSRC and {
(% attempting resource fork dump: ) =
				/rf TFRN (r) file def
	
				
				/maxBlocks fStatsRSRC 1 get 512 div cvi def

				/xAddr rf fileposition def
	
				rf maxBlocks 512 mul string readstring {
				/rawData$ exch def
	
				rawData$ xAddr dumpHex
	/blocksRemain fStatsRSRC 1 get 512 mod def

	blocksRemain 0 ne {
(% last block:) =
	
	
	rf fStatsRSRC 1 get blocksRemain sub setfileposition
	/xAddr rf fileposition def
	
	rf blocksRemain string readstring {
		/rawData$ exch def
	
		rawData$ xAddr dumpHex
	
	}{
(% can not read data from file: ) =
	
	}ifelse
} if	
				
				rf closefile
	
			}{
(% can not read resource from file) =
	
			}ifelse		
		}{
(file is nill: ) =
		}ifelse

	
	}ifelse



